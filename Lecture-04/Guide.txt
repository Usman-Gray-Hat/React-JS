=============
INTRODUCTION:
=============

* JSX stands for JavaScript XML.

* JSX is an extension of JavaScript Language.

* JSX allows us to write HTML in React.

* JSX basically allows us to make a combination of JavaScript expressions & HTML syntax.

* JSX makes it easier to write and add HTML in React.

* JSX allows us to write HTML elements in JavaScript and place them in the DOM without any
  createElement() or appendChild() methods.

* JSX converts HTML tags into react elements.

* You are not required to use JSX, but JSX makes it very much easier to write React applications.

* JSX is an extension of the JavaScript language based on ES6, and is translated into regular
  JavaScript at runtime.

* With JSX you can write expressions inside the curly braces {}.

* The expressions can be a React variable, property, object or any other valid JavaScript expression.
  JSX will execute the expression and return the result.

===================
EXPRESSIONS IN JSX:
===================

* As we read it above JSX allows us to make a combination of Javascript expressions & HTML syntax.
  Here how you can do this practically:

* In Component file (Demo.js):

  let name = "Usman Hameed";
  let age = 24;
  function myFunction() 
  {
    return (
      <div className="App">
      	<h1> My name is {name} </h1>
      	<h1> I am {age} years old </h1>
	<h1> 5 + 5 is equal to {5 + 5} </h1>
      </div>
    );
  }
  export default myFunction;

* Note: Not just expressions or variables, you can also call/pass object by using the curly brackets.
  Here how you can do this:

* In Component file (Demo.js):

  const car_obj = {name:"Civic", color:"Grey", price:"42 Lac PKR"};
  function car_Details() 
  {
    return (
      <div className="App">
      	<h1> Car name is {car_obj.name} </h1>
      	<h1> Color of car is {car_obj.color} </h1>
	<h1> Worth of car is {car_obj.price} </h1>
      </div>
    );
  }
  export default car_Details;

======================
ONE TOP LEVEL ELEMENT:
======================

* The HTML code must be wrapped in ONE top level element other wise it will give you an error.

* So if you like to write two paragraphs, you must put them inside a parent element like a div element.

* But, alternatively you can use a "fragment" to wrap multiple lines. This will prevent unnecessarily adding
  extra nodes to the DOM.

* JSX fragment looks like an empty HTML tag: <> </>

* Example.1 Wrapping up all elements inside parent element "div". (Correct Syntax)

  function myFunction() 
  {
    return (
      <div className="App">
      	<h1> My name is Usman Hameed </h1>
      </div>
    );
  }
  export default myFunction;

* Example.2 Using two elements without wrapping up inside parent element "div". (Incorrect Syntax)

  function myFunction() 
  {
    return (
      <h1> Hello World! </h1>
      <div className="App">
      	<h1> My name is Usman Hameed </h1>
      </div>
    );
  }
  export default myFunction;

* Example.3 Using "JSX fragment". (Correct Syntax)

  function myFunction() 
  {
    return ( 
      <>
      <h1> Hello World! </h1>
      <div className="App">
      	<h1> My name is Usman Hameed </h1>
      </div>
      </>
    );
  }
  export default myFunction;

===========================
CONDITIONS - IF STATEMENTS:
===========================

* React supports if statements, but not inside JSX.

* To be able to use "if else" statement in JSX you should put "if else" outside of the JSX and
  store the result of "if else statement" in a variable. And then you can call that variable in JSX instead.

* Here how you can do this:

  let a = 10;
  let result = "";
  if(a > 5)
  {
    result = "Value is greater than 5";
  }
  else
  {
    result = "Value is less than 5";
  }
 
  function myFunction() 
  {
    return ( 
      <div className="App">
      	<h1> {result} </h1>
      </div>
    );
  }
  export default myFunction;

=================
IMPORTANT POINTS:
=================

* Stand alone tags should also be closed too and it is compulsory in React
  other wise JSX will throw an error.

* And because JSX follows XML rules therefore HTML elements must be properly closed.

* The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript,
  and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.

* JSX solved this by using className instead. When JSX is rendered, it transaltes className attributes
  into class attributes.

* Use className keyword in camel casing.

* "For" attribute is replace with "htmlFor".

* Must keep 1st letter capital of Alias name for importing any component.

* Alternatively for if else statement, you can use ternary expressions inside JSX.
  Here how you can do this:

  let a = 10;
  function myFunction() 
  {
    return ( 
      <div className="App">
      	<h1> { (a > 5) ? "Value is greater than 5" : "Value is less than 5" } </h1>
      </div>
    );
  } 
  export default myFunction;