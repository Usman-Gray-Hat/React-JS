=============
INTRODUCTION:
=============

* Prop types are basically the data types of properties/attributes.

* Prop types are used to validate return type of the data.

* To install and add the dependency for PropTypes use this command:
  npm install prop-types

* The dependency of prop types has now added to package.jSon file.

* Then import prop-types from the node-modules folder:
  import PropTypes from 'prop-types';

* Note: Shortcut for importing prop-types line - Use extension of ES7 React/Redux/GraphQL.
  
* Press Ctrl + Shift + X -> Search ES7 React/Redux/GraphQL and install.

* Then write impt and enter for "import PropTypes from 'prop-types';".

* Write imr and enter for "import React from 'react';".

* To apply type checking on the props for a component, you have to use built-in propTypes
  property which is included in 'prop-types' module.

==============
TYPE CHECKING:
==============

* Example:
  ComponentName.propTypes = {
    props_property: PropTypes.DataType,
    props_property: PropTypes.DataType
  }

* Note: PropTypes is the Alias name of the variable in which the 'prop-types' module stored. And prop-types provide us 
        various data type methods to validate return type of the data stored in properties/attributes.

* In App.js:
import React from 'react';
import PropTypes from 'prop-types';
function App(prop) {
  return(
  <>
  <h1> My name is {prop.name} </h1>
  <h1> My age is {prop.age} </h1>
  <h1> Married status {prop.isMarried.toString()} </h1>
  </>
  );
}

App.propTypes = {
 name: PropTypes.string,
 age: PropTypes.number,
 isMarried: PropTypes.bool
}

export default App;

* In index.js
import App from './App';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App name="Usman Hameed" age={24} isMarried={false} />
  </React.StrictMode>
);

* Note: There are two ways to print boolean value.
  i)  {String(prop.isMarried)}
  ii) {prop.isMarried.toString()}

* You can also work with array and can also define array's return type. 

* In index.js:
  import React from 'react';
  import App from './App';

  const root = ReactDOM.createRoot(document.getElementById('root'));
  const friends = ["Aashir","Farhan","Usman","Bilal"];

  root.render(
    <React.StrictMode>
      <App myArray={friends} />
    </React.StrictMode>
  );

* In App.js:
  import React from 'react';
  import logo from './logo.svg';
  import './App.css';
  function App(prop) {
    return (
      <h1> {prop.myArray} </h1>
    );
  }
  export default App;

* Note: You can also call the value by its index number.

* Example:
 
* In App.js:
  import React from 'react';
  import logo from './logo.svg';
  import './App.css';
  function App(prop) {
    return (
      <>
        <h1> {prop.myArray[0]} </h1>
        <h1> {prop.myArray[1]} </h1>
      </>
    );
  }
  export default App;

* Note: When an invalid datatype is provided to a prop, a warning will be shown
        in the JavaScript console.

* isRequired means that props element defined is required to be passed from parent
  component. If you don't pass it, React will give you a warning message.

* In index.js:
  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import App from './App';

  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(
    <React.StrictMode>
      <App name="Usman Hameed" age={24} />
    </React.StrictMode>
  );

* In App.js
  import React from 'react';
  import PropTypes from 'prop-types';

  function App(prop) {
    return (
     <>
      <h1>My name is {prop.name}</h1>
      <h1>My age is {prop.age}</h1>
     </>
    );
  }
App.propTypes = {
  name:PropTypes.string.isRequired,
  age:PropTypes.number
}
export default App;

================================
DEFAULT PROP VALUES IN REACT JS:
================================

* You can add default values for the props by using defaultProps built-in property
  in 'prop-types' modules.

* Example:

  ComponentName.defaultProps = {
   prop_property: 'You default value',
  }

* In index.js:

  import React from 'react';
  import ReactDOM from 'react-dom/client';
  import App from './App';

  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(
    <React.StrictMode>
      <App name="Usman Hameed" age={24} />
    </React.StrictMode>
  );

* In App.js

  import React from 'react';
  import logo from './logo.svg';
  import './App.css';
  import PropTypes from 'prop-types';

  function App(prop) {
    return (
      <>
      <h1>My name is {prop.name}</h1>
      <h1>My age is {prop.age}</h1>
      </>
    );
  }

  App.defaultProps = {
    name:'Anonymous',
    age:PropTypes.number
  }

  export default App;

* If a component receives the wrong type of props, it can lead to bugs and unexpected
  errors in your app.

* Since JavaScript does not have a built-in type-checking solution, many developers use
  extensions such as TypeScript and Flow. However, React has an internal mechanism for
  props validation called prop types.

* We pass different types of information, such as integers, strings, arrays as props to
  the components.

* We can either create default props or pass the props directly as attributes of the components.

* We passed props from outside a component and used them inside that component.

* Note: Before React 15.5.0, propTypes are available in the React package, but in later
        versions of React, you need to add a dependency to your project.

=========================
WIDE RANGE OF VALIDATORS:
=========================

* Proptypes.array,
* Proptypes.bool,
* Proptypes.func,
* Proptypes.number,
* Proptypes.object,
* Proptypes.string,
* Proptypes.symbol,